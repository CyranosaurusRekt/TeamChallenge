import numpy as np
import SimpleITK as sitk # pip install SimpleITK
import matplotlib.pyplot as plt
import skimage



# We use SimpleITK to load/save nifti images. Furthermore, it contains a lot
# of image processing functionality.
#
# You can convert from/to numpy arrays using
# sitk.GetArrayFromImage
# sitk.GetImageFromArray

# Load the images
t2Image = sitk.ReadImage("Data/002/T2W_FFE.nii.gz")
p0Image = sitk.ReadImage("Data/002/mri/p0T1.nii")

# Compute the brain mask by thresholding p0 > 1.5 (arbitrary upper limit of 5)
brainMaskImage = sitk.BinaryThreshold(p0Image, 1.5, 5.0, 1, 0)

# Get numpy arrays from the images
t2Array = sitk.GetArrayFromImage(t2Image)
brainMaskArray = sitk.GetArrayFromImage(brainMaskImage)

# Get the 6th percentile of intensities within the mask
numBrainVoxels = np.sum(brainMaskArray)
cb = np.cumsum(np.bincount(t2Array.flatten(), brainMaskArray.flatten())) # cumulative histogram
sixthPercentile = np.where(cb < numBrainVoxels * 0.06)[0][-1]

# Get all voxels below the 6th percentile
microbleedImage = sitk.BinaryThreshold(sitk.GetImageFromArray(t2Array*brainMaskArray), 1, int(sixthPercentile), 1, 0)

# Save the (very bad) result.
microbleedImage.CopyInformation(t2Image) # copy the meta data
sitk.WriteImage(microbleedImage, "Data/002/result.nii.gz")

# tim = plt.imread("C:/Users/20170186/Pictures/pp.jpg")
# plt.imshow(tim)
# plt.show()
from skimage import io

struct_arr = io.imread("https://s3.amazonaws.com/assets.datacamp.com/blog_assets/attention-mri.tif")

def previous_slice():
    pass

def next_slice():
    pass

def process_key(event):
    if event.key == 'j':
        previous_slice()
    elif event.key == 'k':
        next_slice()

fig, ax = plt.subplots()
ax.imshow(struct_arr[..., 43])
fig.canvas.mpl_connect('key_press_event', process_key)

def multi_slice_viewer(volume):
    fig, ax = plt.subplots()
    ax.volume = volume
    ax.index = volume.shape[0] // 2
    ax.imshow(volume[ax.index])
    fig.canvas.mpl_connect('key_press_event', process_key)

def process_key(event):
    fig = event.canvas.figure
    ax = fig.axes[0]
    if event.key == 'j':
        previous_slice(ax)
    elif event.key == 'k':
        next_slice(ax)
    fig.canvas.draw()

def previous_slice(ax):
    """Go to the previous slice."""
    volume = ax.volume
    ax.index = (ax.index - 1) % volume.shape[0]  # wrap around using %
    ax.images[0].set_array(volume[ax.index])

def next_slice(ax):
    """Go to the next slice."""
    volume = ax.volume
    ax.index = (ax.index + 1) % volume.shape[0]
    ax.images[0].set_array(volume[ax.index])

multi_slice_viewer(struct_arr2)